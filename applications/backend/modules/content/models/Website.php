<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Website extends BaseWebsite
{

	const STATE_PENDING = 0;
	const STATE_ACCEPTED = 1;
	const STATE_BANNED = 2;
	
	/**
	 * Old category ID when moving website from 
	 * one category to another.
	 *
	 * @var integer
	 */
	private $oldCategoryId = null;
	
	/**
	 * When inserting a new website, 
	 * increment categories count.
	 *
	 * @param Doctrine_Event $event
	 */
	public function preInsert($event) {
		self::fireWebsiteAdded(intval($this->category_id));
		$this->ip = IP::remote();
	}

	/**
	 * When updating the website category, 
	 * modify categories website count.
	 *
	 * @param Doctrine_Event $event
	 */
	public function preUpdate($event) {
		if($this->oldCategoryId != null) {
			self::fireWebsiteMoved($this->oldCategoryId,$this->category_id);
		}
	}
	
	/**
	 * Magic method called when setting a website 
	 * field value.
	 *
	 * @param string $name
	 * @param mixed $value
	 */
	public function __set($name,$value) {
		if($name == 'category_id' && $value != $this->category_id) {
			$this->oldCategoryId = $this->category_id;
		}
		parent::__set($name,$value);
	}
	
	/**
	 * When deleting a new website, 
	 * decrement categories website count.
	 *
	 * @param Doctrine_Event $event
	 */
    public function preDelete($event){
    	self::fireWebsiteDeleted(intval($this->category_id));
    }
	
    /**
     * A website has been moved.
     *
     * @param integer $old_category_id
     * @param integer $new_category_id
     */
    private static function fireWebsiteMoved($old_category_id,$new_category_id) {
    	self::fireWebsiteDeleted($old_category_id);
    	self::fireWebsiteAdded($new_category_id);
    }
    
	/**
	 * Increments category and parent categories website count.
	 *
	 * @param integer $category_id
	 */
	private static function fireWebsiteAdded($category_id) {
		self::modifyWebsiteCount($category_id,(+1));
	}
	
	/**
	 * Decrements category and parent categories website count.
	 *
	 * @param integer $category_id
	 */
	private static function fireWebsiteDeleted($category_id) {
		self::modifyWebsiteCount($category_id,(-1));
	}
	
	/**
	 * Recursively spreads the website event.
	 *
	 * @param integer $category_id
	 * @param integer $inc
	 */
	private static function modifyWebsiteCount($category_id, $inc) {
		if($category_id == 0) return;
		$q = new Doctrine_Query();
		$category = $q	->select('c.category_id, c.website_count')
						->from('Category c')
						->where('c.id=?',$category_id)
						->limit(1)
						->fetchOne(array(), Doctrine::HYDRATE_ARRAY);
		if(is_array($category)) {
			$q = new Doctrine_Query();
			$q	->update('Category c')
				->set('website_count',$inc+$category['website_count'])
				->limit(1)
				->where('c.id=?',$category_id)
				->execute();
			self::modifyWebsiteCount($category['category_id'],$inc);
		}
	}
	
	/**
	 * Returns the website tags as a string.
	 *
	 * @param string $delimiter
	 * @return string
	 */
	public function getTagsAsString($delimiter=',') {
		return self::getTagsAsStringUtils($this->Tags->toArray(),$delimiter);
	}
	
	/**
	 * Utility method to write website tags as string.
	 *
	 * @param array $tags
	 * @param string $delimiter
	 * @return string
	 */
	public static function getTagsAsStringUtils($tags,$delimiter=',') {
		$tagsStr = '';
		if(is_array($tags)) {
			$count = count($tags);
			for($i=0;$i<$count;$i++) {
				if($i == $count-1) {
					$tagsStr .= $tags[$i]['title'];
				} else {
					$tagsStr .= $tags[$i]['title'].$delimiter.' ';
				}
			}
		}
		return $tagsStr;
	}
}