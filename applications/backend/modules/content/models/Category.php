<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Category extends BaseCategory
{

	/**
	 * Old parent category id.
	 *
	 * @var integer
	 */
	private $oldParentId = null;
	
	/**
	 * Old is-adult state.
	 *
	 * @var boolean
	 */
	private $oldIsAdult = null;
	
	/**
	 * When inserting a category, the 
	 * category is_adult attribute should 
	 * be set correctly when parent is marked 
	 * as adult.
	 * 
	 * A category is considerated as adult if the parent 
	 * is adult. Non-adult categories cannot have an adult parent.
	 *
	 * @param Doctrine_Event $event
	 */
	public function preInsert($event) {
		self::fireCategoryAdded($this);
	}
	
	/**
	 * When deleting a category, subcategories 
	 * and sub-websites are deleted recursively.
	 *
	 * @param Doctrine_Event $event
	 */
	public function preDelete($event) {
		self::fireCategoryDeleted($this);
	}
	
	/**
	 * When updating the category, if 
	 * the category is moved, other categories
	 * must be updated.
	 *
	 * @param Doctrine_Event $event
	 */
	public function preUpdate($event) {
		
		if($this->oldParentId != null) {
			self::fireCategoryMoved($this->oldParentId,$this->category_id,$this->website_count);
		}
		if($this->oldIsAdult != null) {
			self::fireCategoryIsAdultStateChanged($this);
		}
	}
	
	/**
	 * Magic method called when setting a website 
	 * field value.
	 *
	 * @param string $name
	 * @param mixed $value
	 */
	public function __set($name,$value) {
		if($name == 'category_id' && $value != $this->category_id) {
			$this->oldParentId = $this->category_id;
		} else if($name == 'is_adult' && $value != $this->is_adult) {
			$this->oldIsAdult = $this->is_adult;
		}
		parent::__set($name,$value);
	}
	
	/**
	 * The passed category is going to be added.
	 *
	 * @param Category $category
	 */
	private static function fireCategoryAdded(Category $category) {
		self::handleCategoryIsAdult($category);
	}
	
	/**
	 * Checks if the parent category is an adult category 
	 * and updates its status.
	 *
	 * @param Category $category
	 */
	private static function handleCategoryIsAdult(Category $category) {
		$category_id = intval($category->category_id);
		if($category_id != 0) {
			$q = new Doctrine_Query();
			$parent = $q->select('c.is_adult')
						->from('Category c')
						->where('c.id=?',$category_id)
						->limit(1)
						->execute(array(),Doctrine::HYDRATE_ARRAY);
			if(is_array($parent) && isset($parent['is_adult'])) {
				if($parent['is_adult'] == 1) {
					$category->is_adult = $parent['is_adult'];
				}
			}
		}
	}
	
	/**
	 * The category is-adult attribute has changed.
	 * The modification must be spread to child categories.
	 *
	 * @param Category $category
	 */
	private static function fireCategoryIsAdultStateChanged(Category $category) {
		$subCategories = $category->Categories;
		if(is_object($subCategories)) {
			foreach($subCategories as $subCategory) {
				$subCategory->is_adult = $category->is_adult;
				self::fireCategoryIsAdultStateChanged($subCategory);
			}
			$subCategories->save();
		}
	}
	
	/**
	 * The category is moved from 
	 *
	 * @param Category $category
	 */
	private static function fireCategoryMoved($old_category_id, $new_category_id, $website_count) {
		// Decrement old parent categories website count
		self::recursiveWebsiteCountUpdate(
			$old_category_id,
			(-intval($website_count))
		);

		// Increment new parent categories website count
		self::recursiveWebsiteCountUpdate(
			$new_category_id,
			(+intval($website_count))
		);
	}
	
	/**
	 * Updates recursively parent categories website count.
	 *
	 * @param Category $category
	 * @param integer $website_count
	 */
	private static function recursiveWebsiteCountUpdate($category_id,$website_count) {
		if($category_id != 0) {
			$q = new Doctrine_Query();
			$category = $q	->select('c.id, c.category_id, c.website_count')
							->from('Category c')
							->where('c.id=?',$category_id)
							->limit(1)
							->fetchOne(array(),Doctrine::HYDRATE_ARRAY);
			if(is_array($category)) {
				$q = new Doctrine_Query();
				$q	->update('Category c')
					->set('c.website_count',$category['website_count']+$website_count)
					->where('c.id=?',$category['id'])
					->limit(1)
					->execute();
				if($category['category_id'] != 0) {
					self::recursiveWebsiteCountUpdate($category['category_id'],$website_count);
				}
			}
		}
	}
	
	/**
	 * Recursively deletes all sub-websites and sub-categories.
	 *
	 * @param Category $category
	 */
	private static function fireCategoryDeleted(Category $category) {
		$websites = $category->Websites;
		if(is_object($websites)) {
			$websites->delete();
		}
		$subCategories = $category->Categories;
		if(is_object($subCategories)) {
			$subCategories->delete();
		}
	}
	
	/**
	 * Recursively retrieves all category up to root.
	 *
	 * @param array $categories
	 * @return array
	 */
	public function getWayToRoot($categories=array()) {
		array_push($categories,$this);
		if($this->category_id != null) {
			$parent = Doctrine::getTable('Category')->createQuery()
					->select('id, category_id, title')
					->where('id=?',$this->category_id)
					->limit(1)
					->fetchOne();
			if(is_object($parent)) {
				$categories = $parent->getWayToRoot($categories);
			}
		}
		return $categories;
	}
}