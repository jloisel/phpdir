<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @author Jerome Loisel
 */
class Customer extends BaseCustomer
{
	/**
	 * There are several customer levels.
	 *
	 */
	const LEVEL_WEBMASTER = 0;
	const LEVEL_MODERATOR = 1;
	const LEVEL_ADMINISTRATOR = 2;
	
	/**
	 * Customer role. This is usually used 
	 * to be displayed in HTML.
	 *
	 */
	const ROLE_WEBMASTER = 'webmaster';
	const ROLE_MODERATOR = 'moderator';
	const ROLE_ADMINISTRATOR = 'administrator';
	
	/**
	 * Webmaster credentials.
	 *
	 * @var array
	 */
	public static $WEBMASTER_CREDENTIALS = array(
		self::LEVEL_WEBMASTER
	);
	
	/**
	 * Moderator credentials.
	 *
	 * @var array
	 */
	public static $MODERATOR_CREDENTIALS = array(
		self::LEVEL_WEBMASTER,
		self::LEVEL_MODERATOR
	);
	
	/**
	 * Administrator credentials.
	 *
	 * @var array
	 */
	public static $ADMINISTRATOR_CREDENTIALS = array(
		self::LEVEL_WEBMASTER,
		self::LEVEL_MODERATOR,
		self::LEVEL_ADMINISTRATOR
	);
	
	/**
	 * The logged in customer is cached in 
	 * this static attribute.
	 *
	 * @var Customer
	 */
	private static $loggedCustomer = null;
	
	/**
	 * Returns the credentials of the customer depending on 
	 * the customer level.
	 *
	 * @return array
	 */
	public function getCredentials() {
		switch($this->level) {
			case self::LEVEL_ADMINISTRATOR:
				return self::$ADMINISTRATOR_CREDENTIALS;
			case self::LEVEL_MODERATOR:
				return self::$MODERATOR_CREDENTIALS;
			case self::LEVEL_WEBMASTER:
				return self::$WEBMASTER_CREDENTIALS;
		}
		return null;
	}
	
	/**
	 * Returns the customer role.
	 *
	 * @return integer
	 */
	public function getRole() {
		switch($this->level) {
			case self::LEVEL_ADMINISTRATOR:
				return self::ROLE_ADMINISTRATOR;
			case self::LEVEL_MODERATOR:
				return self::ROLE_MODERATOR;
			case self::LEVEL_WEBMASTER:
				return self::ROLE_WEBMASTER;
		}
		return self::ROLE_WEBMASTER;
	}
	
	/**
	 * Before inserting a user into the database:
	 * - fetch user IP
	 * - set created_on field
	 *
	 * @param Doctrine_Event $event
	 */
	public function preInsert($event) {
		$this->created_on = date('Y-m-d H:i:s');
		$this->ip = IP::remote();
	}
	
	/**
	 * Returns the customer who is currently 
	 * logged in.
	 *
	 * @return Customer
	 */
	public static function getLogged() {
		if(self::$loggedCustomer == null) {
			$id = intval(Context::getUser()->getAttribute('id',0));
			if($id != 0) {
				self::$loggedCustomer = Doctrine::getTable('Customer')->find($id);
			}
		}
		return self::$loggedCustomer;
	}
	
	/**
	 * Says if the passed password is equal to the 
	 * customer password.
	 *
	 * @param string $password
	 * @return boolean
	 */
	public function isValidPassword($password) {
		return md5($password) == (string)$this->password;
	}
}