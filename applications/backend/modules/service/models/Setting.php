<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Setting extends BaseSetting
{
	/**
	 * All module settings indexed by 
	 * setting module_id.
	 *
	 * @var Doctrine_Collection
	 */
	private static $settings = null;
	
	/**
	 * Returns the settings array indexed by 
	 * settings module_name.
	 *
	 * @return Doctrine_Collection
	 */
	public static function getAll() {
		if(self::$settings == null) {
			$q = new Doctrine_Query();
			$settings = $q
					->from('Setting s INDEXBY s.the_key')
					->select('s.the_key, s.the_value')
					->execute(array(),Doctrine::HYDRATE_ARRAY);
			
			self::$settings = array();
			if(is_array($settings) && count($settings) > 0) {
				foreach($settings as $setting) {
					self::$settings[$setting['the_key']] = $setting['the_value'];
				}
			}
		}
		return self::$settings;
	}
	
	/**
	 * Returns a module setting.
	 *
	 * @param string $key
	 * @param mixed $defaultValue
	 * @return mixed
	 */
	public static function getValue($key,$defaultValue=null) {
		self::getAll();
		return isset(self::$settings[$key]) ? 
			unserialize(self::$settings[$key]) : $defaultValue;
	}
	
	/**
	 * Set a module setting.
	 *
	 * @param string $key
	 * @param mixed $value
	 */
	public static function setValue($key,$value) {
		self::getAll();
		if(is_array(self::$settings)) {
			self::$settings[$key] = serialize($value);
		}
	}
	
	/**
	 * Removes a module setting.
	 *
	 * @param string $moduleName
	 * @param string $key
	 */
	public static function removeValue($key) {
		self::getAll();
		if(isset(self::$settings[$key])) {
			unset(self::$settings[$key]);
		}
	}
	
	/**
	 * Save settings if they have been loaded and/or modified.
	 */
	public static function saveSettings() {
		if(self::$settings != null) {
			$settings = Doctrine::getTable('Setting')->findAll();
			
			foreach($settings as $setting) {
				if(!isset(self::$settings[$setting->the_key])) {
					$settings->delete();
				} else {
					$setting->the_value = self::$settings[$setting->the_key];
					$setting->save();
				}
				unset(self::$settings[$setting->the_key]);
			}
			
			if(is_array(self::$settings) && count(self::$settings) > 0) {
				foreach(self::$settings as $key => $value) {
					$setting = new Setting();
					$setting->the_key = $key;
					$setting->the_value = $value;
					$setting->save();
				}
			}

			self::$settings = null;
		}
	}
}