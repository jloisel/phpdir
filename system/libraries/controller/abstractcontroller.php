<?php

/**
 * Controller common implementation.
 * 
 * @author Jerome Loisel
 */
abstract class AbstractController implements Controller {

	/**
	 * Http Request.
	 *
	 * @var MyHttpRequest
	 */
	protected $httpRequest = null;

	/**
	 * Response sent to browser.
	 *
	 * @var MyHttpResponse
	 */
	protected $httpResponse = null;

	/**
	 * Template Engine instance.
	 *
	 * @var TemplateEngine
	 */
	protected $tpl = null;

	/**
	 * Default constructor.
	 *
	 */
	public function __construct() {
		$this->tpl = TemplateEngine::getInstance();
	}

	/**
	 * Wrapper method to return an HttpRequest parameter.
	 *
	 * @param String $paramName
	 * @param String $defaultValue
	 */
	protected final function getParameter($paramName, $defaultValue=null) {
		return $this->getHttpRequest()->getParameter($paramName,$defaultValue);
	}

	/**
	 * Is a parameter present in the request?
	 *
	 * @param String $paramName
	 * @return Boolean
	 */
	protected final function hasParameter($paramName) {
		return $this->getHttpRequest()->hasParameter($paramName);
	}

	/**
	 * Magic method to get a saved mixed variable.
	 *
	 * @param String $name
	 * @return Mixed
	 */
	public function __get($name) {
		return $this->tpl->$name;
	}

	/**
	 * Magic method to get
	 *
	 * @param String $name
	 * @param Mixed $value
	 */
	public final function __set($name, $value) {
		$this->tpl->$name = $value;
	}

	/**
	 * Returns all the request parameters.
	 *
	 * @return array
	 */
	protected final function getParameters() {
		return $this->getHttpRequest()->getParameters();
	}

	/**
	 * Shortcut to request method.
	 *
	 * @return String
	 */
	protected final function getRequestMethod() {
		return $this->getHttpRequest()->getRequestMethod();
	}

	/**
	 * Returns the cookie value.
	 *
	 * @param String $name
	 * @param mixed $defaultValue
	 */
	protected final function getCookie($name,$defaultValue=null) {
		return $this->getHttpRequest()->getCookie($name,$defaultValue);
	}

	/**
	* Sets a cookie.
	*
	* @param String HTTP header name
	* @param String Value for the cookie
	* @param String Cookie expiration period
	* @param String Path
	* @param String Domain name
	* @param Boolean If secure
	* @param Boolean If uses only HTTP
	*
	* @throws Exception If fails to set the cookie
	*/
	protected final function setCookie($name, $value, $expire = null, $path = '/', $domain = '', $secure = false, $httpOnly = false) {
		$this->getHttpResponse()->setCookie($name,$value,$expire,$path,$domain,$secure,$httpOnly);
	}

	/**
	 * Unique instance of the user.
	 *
	 * @return User
	 */
	protected function getUser() {
		return Context::getUser();
	}

	/**
	 * Forwars the request to another controller and action.
	 * 
	 * @param $controller
	 * @param $action
	 */
	protected final function forward($controller, $action) {
		$httpRequest = Context::getHttpRequest();
		$this->forwardToController($httpRequest, $controller);
		$this->forwardToAction($httpRequest, $action);
		// Launch a new filter chain. 
		$filterChain = new FilterChain();
		$filterChain->execute();
	}
	
	/**
	 * Sets the forwarded controller and updates the current 
	 * controller value in HTTPRequest.
	 *
	 * @param MyHttpRequest $httpRequest
	 * @param string $controller
	 */
	private function forwardToController($httpRequest, $controller) {
		$httpRequest->setParameter(MyHttpRequest::FORWARD_CONTROLLER_PARAM, $httpRequest->getController());
		$httpRequest->setParameter(MyHttpRequest::CONTROLLER_PARAM,$controller);
	}
	
	/**
	 * Sets the action which forwards the execution.
	 *
	 * @param MyHttpRequest $httpRequest
	 * @param string $action
	 */
	private function forwardToAction($httpRequest, $action) {
		$httpRequest->setParameter(MyHttpRequest::FORWARD_ACTION_PARAM, $httpRequest->getAction());
		$httpRequest->setParameter(MyHttpRequest::ACTION_PARAM,$action);
	}
	
	
	/**
	 * Redirects the user to the location which 
	 * will be generated by the router, for the specified 
	 * route and parameters.
	 * This performs an HTTP redirection (302 : moved temporarily)
	 *
	 * @param string $route name of the route
	 * @param array $params parameters of the route
	 */
	protected function redirect($route, $params=array(),$statusCode=302) {
		$router = Context::getRouter();
		if($route != null && is_string($route)) {
			$httpResponse = Context::getHttpResponse();
			$httpResponse->setStatusCode(intval($statusCode));
			$httpResponse->setHttpHeader(	'location',
											Config::get('site_url')
											.Context::getParameterHolder()->get(Parameter::VIRTUAL_URL)
											.$router->generate($route,$params));
			$httpResponse->setHttpHeader('connection','close');
			$httpResponse->setViewMode(View::HEAD);
			$httpResponse->send();
			exit();
		}
	}

	/**
	 * Returns the HTTP request.
	 *
	 * @return MyHttpRequest
	 */
	protected final function getHttpRequest() {
		if($this->httpRequest == null) {
			$this->httpRequest = Context::getHttpRequest();
		}
		return $this->httpRequest;
	}
	
	/**
	 * Returns the HTTP response.
	 *
	 * @return MyHttpResponse
	 */
	protected final function getHttpResponse() {
		if($this->httpResponse == null) {
			$this->httpResponse = Context::getHttpResponse();
		}
		return $this->httpResponse;
	}
	
	/**
	 * Returns the database connection.
	 *
	 * @return Doctrine_Connection
	 */
	protected final function getDatabaseConnection() {
		return DBWrapper::getDatabaseConnection();
	}
	
	/**
	 * In default case, the pre execute method 
	 * does nothing.
	 *
	 */
	public function preExecute() {
		
	}
	
	/**
	 * In default case, the post execute method 
	 * does nothing.
	 *
	 */
	public function postExecute() {
		
	}
	
	/**
	 * Returns the contextual controller.
	 *
	 * @return string
	 */
	protected final function getController() {
		return $this->getHttpRequest()->getController();
	}
	
	/**
	 * Returns the contextual action.
	 *
	 * @return string
	 */
	protected final function getAction() {
		return $this->getHttpRequest()->getAction();
	}
	
	/**
	 * Returns the parameter holder.
	 *
	 * @return ParameterHolder
	 */
	protected final function getParameterHolder() {
		return Context::getParameterHolder();
	}
	
	/**
	 * String representation of a Controller.
	 *
	 * @return String
	 */
	public final function __toString() {
		return get_class($this);
	}
}

?>